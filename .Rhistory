xlim=c(-74, -65),
ylim=c(38.2, 40.7),
force=15,
force_pull = 0,
max.time=5,
max.iter=1000000,
segment.color = 'white', show.legend = FALSE,
arrow = arrow(length = unit(0.15, "cm"))) +
geom_label_repel(data = drainages_4, aes(y=lat, x=long, label=River),
box.padding   = 0.35, size = 5, alpha=0.9, segment.alpha=1, point.padding = 0.5,
xlim=c(-70, -65),
ylim=c(40.6, 43.7),
segment.color = 'white', show.legend = FALSE,
force=10,
max.time=5,
max.iter=1000000,
arrow = arrow(length = unit(0.15, "cm"))) +
scale_size_manual(values=seq(0.1,20,by=0.04)) +
annotation_north_arrow(location = "br", which_north = "true", # adjust arrow location as needed
pad_x = unit(0.2, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering(text_size=20, text_col = "white", fill=c("darkgray", "white"), line_col="white"),
height = unit(2, "cm"), width = unit(2, "cm")) +
annotate("text", x=-70, y=34, label="Atlantic Ocean", color="gray60", hjust=0.5, vjust=0.5, size=20, angle=50) +
#labs(title = paste(river_name_plot, "River Basin")) +
#coord_equal() +
coord_sf(expand = FALSE, xlim=c(xmin, xmax), ylim=c(ymin, ymax)) +
ylab("") +
xlab("") +
theme(panel.grid.major = element_line(color = gray(.5), linetype = "dashed", size = 0.7),
panel.background = element_rect(fill = "#1c5163"),
plot.title = element_text(color = "black", size = 16, hjust = 0.5))
# plot dimensions
# mess with the multipliers to get a nice figure
height = (ymax-ymin)*0.7
width = (xmax-xmin)*0.6
# save as png
ggsave(paste(wd, "maps/", "eastCoastRivers", ".png", sep=""), plot=p,  units = "in", dpi=900, height=height, width=width)
#ggsave(paste(wd, "maps/", river_name, ".pdf", sep=""), height=height, width=width)
# main plot
p <- ggplot() +
geom_sf(data=canada_borders_sf_crop, fill="black", color=NA) +
geom_sf(data=state_borders_sf_crop, fill="black", color=NA) +
#geom_raster(topo_crop_df, mapping = aes(x = x, y = y, alpha = GRAY_HR_SR_OB)) +
#scale_alpha(range =  c(0, 1), guide = "none") +
#geom_sf(data=targetWS_merged_sf_crop, fill=alpha("white", 0.15), color=NA) +
geom_sf(data=landBorders_sf_crop, fill=NA, color="white", size=0.8) +
scale_fill_manual(values=rep(c('#1b9e77','#d95f02','#7570b3','#e7298a','#66a61e','#e6ab02','#a6761d'), 10)) +
geom_sf(data=canada_rivers_can_sf_crop, color="#565656", lineend = "round", size=0.25, show.legend = FALSE,) + #CHECK STRAHLER
geom_sf(data=rivers_sf_crop, color="#565656", lineend = "round", aes(size=factor(Strahler)), show.legend = FALSE) +
geom_sf(data=canada_lakes_can_sf_crop, fill="#565656", color=NA) +
geom_sf(data=canada_islands_sf_crop, fill="black", color=NA) +
geom_sf(data=target_wbs_lakes_all_sf_crop, fill="#565656", color=NA) +
geom_sf(data=targetWS_merged_sf_crop, aes(fill=factor(target_fac)), alpha=0.5, color=NA, show.legend = FALSE,) +
#geom_sf(data=targetInlets_merged_sf_crop, fill="#82eefd", color=NA) +
geom_sf(data=targetInlets_merged_sf_crop, fill="gray20", color=NA) +
geom_sf(data=targetLakes_merged_sf_crop, fill="gray20", color=NA) +
geom_sf(data=targetRivers_merged_sf_crop, aes(size=factor(Strahler)), color="gray20",
show.legend = FALSE, lineend = "round") +
geom_label_repel(data = drainages_1, aes(y=lat, x=long, label=River),
box.padding   = 0.35, size = 5, alpha=0.9, segment.alpha=1, point.padding = 0.5,
xlim=c(-78.5, -65),
ylim=c(20, 33.7),
segment.color = 'white', show.legend = FALSE,
arrow = arrow(length = unit(0.15, "cm"))) +
geom_label_repel(data = drainages_2, aes(y=lat, x=long, label=River),
box.padding   = 0.35, size = 5, alpha=0.9, segment.alpha=1, point.padding = 0.5,
xlim=c(-75, -65),
ylim=c(34, 38.2),
segment.color = 'white', show.legend = FALSE,
arrow = arrow(length = unit(0.15, "cm"))) +
geom_label_repel(data = drainages_3, aes(y=lat, x=long, label=River),
box.padding   = 0.35, size = 5, alpha=0.9, segment.alpha=1, point.padding = 0.5,
xlim=c(-74, -65),
ylim=c(38.2, 40.7),
force=15,
force_pull = 0,
max.time=5,
max.iter=1000000,
segment.color = 'white', show.legend = FALSE,
arrow = arrow(length = unit(0.15, "cm"))) +
geom_label_repel(data = drainages_4, aes(y=lat, x=long, label=River),
box.padding   = 0.35, size = 5, alpha=0.9, segment.alpha=1, point.padding = 0.5,
xlim=c(-70, -65),
ylim=c(40.6, 43.7),
segment.color = 'white', show.legend = FALSE,
force=10,
max.time=5,
max.iter=1000000,
arrow = arrow(length = unit(0.15, "cm"))) +
scale_size_manual(values=seq(0.1,20,by=0.04)) +
annotation_north_arrow(location = "br", which_north = "true", # adjust arrow location as needed
pad_x = unit(0.2, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering(text_size=20, text_col = "white", fill=c("darkgray", "white"), line_col="white"),
height = unit(2, "cm"), width = unit(2, "cm")) +
annotate("text", x=-70, y=34, label="Atlantic Ocean", color="gray60", hjust=0.5, vjust=0.5, size=20, angle=50) +
#labs(title = paste(river_name_plot, "River Basin")) +
#coord_equal() +
coord_sf(expand = FALSE, xlim=c(xmin, xmax), ylim=c(ymin, ymax)) +
ylab("") +
xlab("") +
theme(panel.grid.major = element_line(color = gray(.5), linetype = "dashed", size = 0.7),
panel.background = element_rect(fill = "#1c5163"),
plot.title = element_text(color = "black", size = 16, hjust = 0.5))
# plot dimensions
# mess with the multipliers to get a nice figure
height = (ymax-ymin)*0.7
width = (xmax-xmin)*0.6
# save as png
ggsave(paste(wd, "maps/", "eastCoastRivers", ".png", sep=""), plot=p,  units = "in", dpi=900, height=height, width=width)
#ggsave(paste(wd, "maps/", river_name, ".pdf", sep=""), height=height, width=width)
# main plot
p <- ggplot() +
geom_sf(data=canada_borders_sf_crop, fill="black", color=NA) +
geom_sf(data=state_borders_sf_crop, fill="black", color=NA) +
#geom_raster(topo_crop_df, mapping = aes(x = x, y = y, alpha = GRAY_HR_SR_OB)) +
#scale_alpha(range =  c(0, 1), guide = "none") +
#geom_sf(data=targetWS_merged_sf_crop, fill=alpha("white", 0.15), color=NA) +
geom_sf(data=landBorders_sf_crop, fill=NA, color="white", size=0.8) +
scale_fill_manual(values=rep(c('#1b9e77','#d95f02','#7570b3','#e7298a','#66a61e','#e6ab02','#a6761d'), 10)) +
geom_sf(data=canada_rivers_can_sf_crop, color="#565656", lineend = "round", size=0.25, show.legend = FALSE,) + #CHECK STRAHLER
geom_sf(data=rivers_sf_crop, color="#565656", lineend = "round", aes(size=factor(Strahler)), show.legend = FALSE) +
geom_sf(data=canada_lakes_can_sf_crop, fill="#565656", color=NA) +
geom_sf(data=canada_islands_sf_crop, fill="black", color=NA) +
geom_sf(data=target_wbs_lakes_all_sf_crop, fill="#565656", color=NA) +
geom_sf(data=targetWS_merged_sf_crop, aes(fill=factor(target_fac)), alpha=0.5, color=NA, show.legend = FALSE,) +
#geom_sf(data=targetInlets_merged_sf_crop, fill="#82eefd", color=NA) +
geom_sf(data=targetInlets_merged_sf_crop, fill="gray90", color=NA) +
geom_sf(data=targetLakes_merged_sf_crop, fill="gray90", color=NA) +
geom_sf(data=targetRivers_merged_sf_crop, aes(size=factor(Strahler)), color="gray90",
show.legend = FALSE, lineend = "round") +
geom_label_repel(data = drainages_1, aes(y=lat, x=long, label=River),
box.padding   = 0.35, size = 5, alpha=0.9, segment.alpha=1, point.padding = 0.5,
xlim=c(-78.5, -65),
ylim=c(20, 33.7),
segment.color = 'white', show.legend = FALSE,
arrow = arrow(length = unit(0.15, "cm"))) +
geom_label_repel(data = drainages_2, aes(y=lat, x=long, label=River),
box.padding   = 0.35, size = 5, alpha=0.9, segment.alpha=1, point.padding = 0.5,
xlim=c(-75, -65),
ylim=c(34, 38.2),
segment.color = 'white', show.legend = FALSE,
arrow = arrow(length = unit(0.15, "cm"))) +
geom_label_repel(data = drainages_3, aes(y=lat, x=long, label=River),
box.padding   = 0.35, size = 5, alpha=0.9, segment.alpha=1, point.padding = 0.5,
xlim=c(-74, -65),
ylim=c(38.2, 40.7),
force=15,
force_pull = 0,
max.time=5,
max.iter=1000000,
segment.color = 'white', show.legend = FALSE,
arrow = arrow(length = unit(0.15, "cm"))) +
geom_label_repel(data = drainages_4, aes(y=lat, x=long, label=River),
box.padding   = 0.35, size = 5, alpha=0.9, segment.alpha=1, point.padding = 0.5,
xlim=c(-70, -65),
ylim=c(40.6, 43.7),
segment.color = 'white', show.legend = FALSE,
force=10,
max.time=5,
max.iter=1000000,
arrow = arrow(length = unit(0.15, "cm"))) +
scale_size_manual(values=seq(0.1,20,by=0.04)) +
annotation_north_arrow(location = "br", which_north = "true", # adjust arrow location as needed
pad_x = unit(0.2, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering(text_size=20, text_col = "white", fill=c("darkgray", "white"), line_col="white"),
height = unit(2, "cm"), width = unit(2, "cm")) +
annotate("text", x=-70, y=34, label="Atlantic Ocean", color="gray60", hjust=0.5, vjust=0.5, size=20, angle=50) +
#labs(title = paste(river_name_plot, "River Basin")) +
#coord_equal() +
coord_sf(expand = FALSE, xlim=c(xmin, xmax), ylim=c(ymin, ymax)) +
ylab("") +
xlab("") +
theme(panel.grid.major = element_line(color = gray(.5), linetype = "dashed", size = 0.7),
panel.background = element_rect(fill = "#1c5163"),
plot.title = element_text(color = "black", size = 16, hjust = 0.5))
# plot dimensions
# mess with the multipliers to get a nice figure
height = (ymax-ymin)*0.7
width = (xmax-xmin)*0.6
# save as png
ggsave(paste(wd, "maps/", "eastCoastRivers", ".png", sep=""), plot=p,  units = "in", dpi=900, height=height, width=width)
#ggsave(paste(wd, "maps/", river_name, ".pdf", sep=""), height=height, width=width)
# INLAND BORDERS
# data from https://www.sciencebase.gov/catalog/item/4fb555ebe4b04cb937751db9
# modified with QGIS to remove coastal borders
landBorders <- readOGR(paste(wd, "/shapefiles/PoliticalBoundaries_Shapefiles/boundary_l_v2.shp", sep=""))
landBorders <- spTransform(landBorders, CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
landBorders <- gSimplify(landBorders, tol = 0.00001)
landBorders_sf <- st_as_sf(landBorders)
landBorders_sf_crop <- st_crop(landBorders_sf, xmin = xmin, xmax = xmax,
ymin = ymin, ymax = ymax)
# main plot
p <- ggplot() +
geom_sf(data=canada_borders_sf_crop, fill="black", color=NA) +
geom_sf(data=state_borders_sf_crop, fill="black", color=NA) +
#geom_raster(topo_crop_df, mapping = aes(x = x, y = y, alpha = GRAY_HR_SR_OB)) +
#scale_alpha(range =  c(0, 1), guide = "none") +
#geom_sf(data=targetWS_merged_sf_crop, fill=alpha("white", 0.15), color=NA) +
geom_sf(data=landBorders_sf_crop, fill=NA, color="white", size=0.8) +
scale_fill_manual(values=rep(c('#1b9e77','#d95f02','#7570b3','#e7298a','#66a61e','#e6ab02','#a6761d'), 10)) +
geom_sf(data=canada_rivers_can_sf_crop, color="#565656", lineend = "round", size=0.25, show.legend = FALSE,) + #CHECK STRAHLER
geom_sf(data=rivers_sf_crop, color="#565656", lineend = "round", aes(size=factor(Strahler)), show.legend = FALSE) +
geom_sf(data=canada_lakes_can_sf_crop, fill="#565656", color=NA) +
geom_sf(data=canada_islands_sf_crop, fill="black", color=NA) +
geom_sf(data=target_wbs_lakes_all_sf_crop, fill="#565656", color=NA) +
geom_sf(data=targetWS_merged_sf_crop, aes(fill=factor(target_fac)), alpha=0.5, color=NA, show.legend = FALSE,) +
#geom_sf(data=targetInlets_merged_sf_crop, fill="#82eefd", color=NA) +
geom_sf(data=targetInlets_merged_sf_crop, fill="gray90", color=NA) +
geom_sf(data=targetLakes_merged_sf_crop, fill="gray90", color=NA) +
geom_sf(data=targetRivers_merged_sf_crop, aes(size=factor(Strahler)), color="gray90",
show.legend = FALSE, lineend = "round") +
geom_label_repel(data = drainages_1, aes(y=lat, x=long, label=River),
box.padding   = 0.35, size = 5, alpha=0.9, segment.alpha=1, point.padding = 0.5,
xlim=c(-78.5, -65),
ylim=c(20, 33.7),
segment.color = 'white', show.legend = FALSE,
arrow = arrow(length = unit(0.15, "cm"))) +
geom_label_repel(data = drainages_2, aes(y=lat, x=long, label=River),
box.padding   = 0.35, size = 5, alpha=0.9, segment.alpha=1, point.padding = 0.5,
xlim=c(-75, -65),
ylim=c(34, 38.2),
segment.color = 'white', show.legend = FALSE,
arrow = arrow(length = unit(0.15, "cm"))) +
geom_label_repel(data = drainages_3, aes(y=lat, x=long, label=River),
box.padding   = 0.35, size = 5, alpha=0.9, segment.alpha=1, point.padding = 0.5,
xlim=c(-74, -65),
ylim=c(38.2, 40.7),
force=15,
force_pull = 0,
max.time=5,
max.iter=1000000,
segment.color = 'white', show.legend = FALSE,
arrow = arrow(length = unit(0.15, "cm"))) +
geom_label_repel(data = drainages_4, aes(y=lat, x=long, label=River),
box.padding   = 0.35, size = 5, alpha=0.9, segment.alpha=1, point.padding = 0.5,
xlim=c(-70, -65),
ylim=c(40.6, 43.7),
segment.color = 'white', show.legend = FALSE,
force=10,
max.time=5,
max.iter=1000000,
arrow = arrow(length = unit(0.15, "cm"))) +
scale_size_manual(values=seq(0.1,20,by=0.04)) +
annotation_north_arrow(location = "br", which_north = "true", # adjust arrow location as needed
pad_x = unit(0.2, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering(text_size=20, text_col = "white", fill=c("darkgray", "white"), line_col="white"),
height = unit(2, "cm"), width = unit(2, "cm")) +
annotate("text", x=-70, y=34, label="Atlantic Ocean", color="gray60", hjust=0.5, vjust=0.5, size=20, angle=50) +
#labs(title = paste(river_name_plot, "River Basin")) +
#coord_equal() +
coord_sf(expand = FALSE, xlim=c(xmin, xmax), ylim=c(ymin, ymax)) +
ylab("") +
xlab("") +
theme(panel.grid.major = element_line(color = gray(.5), linetype = "dashed", size = 0.7),
panel.background = element_rect(fill = "#1c5163"),
plot.title = element_text(color = "black", size = 16, hjust = 0.5))
# plot dimensions
# mess with the multipliers to get a nice figure
height = (ymax-ymin)*0.7
width = (xmax-xmin)*0.6
# save as png
ggsave(paste(wd, "maps/", "eastCoastRivers", ".png", sep=""), plot=p,  units = "in", dpi=900, height=height, width=width)
#ggsave(paste(wd, "maps/", river_name, ".pdf", sep=""), height=height, width=width)
# main plot
p <- ggplot() +
geom_sf(data=canada_borders_sf_crop, fill="black", color=NA) +
geom_sf(data=state_borders_sf_crop, fill="black", color=NA) +
#geom_raster(topo_crop_df, mapping = aes(x = x, y = y, alpha = GRAY_HR_SR_OB)) +
#scale_alpha(range =  c(0, 1), guide = "none") +
#geom_sf(data=targetWS_merged_sf_crop, fill=alpha("white", 0.15), color=NA) +
scale_fill_manual(values=rep(c('#1b9e77','#d95f02','#7570b3','#e7298a','#66a61e','#e6ab02','#a6761d'), 10)) +
geom_sf(data=canada_rivers_can_sf_crop, color="#565656", lineend = "round", size=0.25, show.legend = FALSE,) + #CHECK STRAHLER
geom_sf(data=rivers_sf_crop, color="#565656", lineend = "round", aes(size=factor(Strahler)), show.legend = FALSE) +
geom_sf(data=canada_lakes_can_sf_crop, fill="#565656", color=NA) +
geom_sf(data=canada_islands_sf_crop, fill="black", color=NA) +
geom_sf(data=target_wbs_lakes_all_sf_crop, fill="#565656", color=NA) +
geom_sf(data=landBorders_sf_crop, fill=NA, color="white", size=0.8) +
geom_sf(data=targetWS_merged_sf_crop, aes(fill=factor(target_fac)), alpha=0.5, color=NA, show.legend = FALSE,) +
#geom_sf(data=targetInlets_merged_sf_crop, fill="#82eefd", color=NA) +
geom_sf(data=targetInlets_merged_sf_crop, fill="gray90", color=NA) +
geom_sf(data=targetLakes_merged_sf_crop, fill="gray90", color=NA) +
geom_sf(data=targetRivers_merged_sf_crop, aes(size=factor(Strahler)), color="gray90",
show.legend = FALSE, lineend = "round") +
geom_label_repel(data = drainages_1, aes(y=lat, x=long, label=River),
box.padding   = 0.35, size = 5, alpha=0.9, segment.alpha=1, point.padding = 0.5,
xlim=c(-78.5, -65),
ylim=c(20, 33.7),
segment.color = 'white', show.legend = FALSE,
arrow = arrow(length = unit(0.15, "cm"))) +
geom_label_repel(data = drainages_2, aes(y=lat, x=long, label=River),
box.padding   = 0.35, size = 5, alpha=0.9, segment.alpha=1, point.padding = 0.5,
xlim=c(-75, -65),
ylim=c(34, 38.2),
segment.color = 'white', show.legend = FALSE,
arrow = arrow(length = unit(0.15, "cm"))) +
geom_label_repel(data = drainages_3, aes(y=lat, x=long, label=River),
box.padding   = 0.35, size = 5, alpha=0.9, segment.alpha=1, point.padding = 0.5,
xlim=c(-74, -65),
ylim=c(38.2, 40.7),
force=15,
force_pull = 0,
max.time=5,
max.iter=1000000,
segment.color = 'white', show.legend = FALSE,
arrow = arrow(length = unit(0.15, "cm"))) +
geom_label_repel(data = drainages_4, aes(y=lat, x=long, label=River),
box.padding   = 0.35, size = 5, alpha=0.9, segment.alpha=1, point.padding = 0.5,
xlim=c(-70, -65),
ylim=c(40.6, 43.7),
segment.color = 'white', show.legend = FALSE,
force=10,
max.time=5,
max.iter=1000000,
arrow = arrow(length = unit(0.15, "cm"))) +
scale_size_manual(values=seq(0.1,20,by=0.04)) +
annotation_north_arrow(location = "br", which_north = "true", # adjust arrow location as needed
pad_x = unit(0.2, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering(text_size=20, text_col = "white", fill=c("darkgray", "white"), line_col="white"),
height = unit(2, "cm"), width = unit(2, "cm")) +
annotate("text", x=-70, y=34, label="Atlantic Ocean", color="gray60", hjust=0.5, vjust=0.5, size=20, angle=50) +
#labs(title = paste(river_name_plot, "River Basin")) +
#coord_equal() +
coord_sf(expand = FALSE, xlim=c(xmin, xmax), ylim=c(ymin, ymax)) +
ylab("") +
xlab("") +
theme(panel.grid.major = element_line(color = gray(.5), linetype = "dashed", size = 0.7),
panel.background = element_rect(fill = "#1c5163"),
plot.title = element_text(color = "black", size = 16, hjust = 0.5))
# plot dimensions
# mess with the multipliers to get a nice figure
height = (ymax-ymin)*0.7
width = (xmax-xmin)*0.6
# save as png
ggsave(paste(wd, "maps/", "eastCoastRivers", ".png", sep=""), plot=p,  units = "in", dpi=900, height=height, width=width)
#ggsave(paste(wd, "maps/", river_name, ".pdf", sep=""), height=height, width=width)
library(RColorBrewer)
library(maps)
library(rgdal)
library(gridExtra)
library(maptools)
library(scales)
library(raster)
library(rgeos)
library(ggplot2)
library(grid)
library(mapplots)
library(dplyr)
library(mapproj)
library(ggmap)
library(ggspatial)
library(sf)
library(ggrepel)
library(cowplot)
library(rnaturalearth)
library(rnaturalearthdata)
library(rnaturalearthhires)
##############################################################################################################################
# specify the following parameters
HUCs <- c("010200") # top-level vector of HUCs to match (must be strings, not numeric)
# search for HUCs here: https://water.usgs.gov/wsc/map_index.html
river_name <- "Penobscot" # river name for files
river_name_plot <- "Penobscot" # river name for plot title
wd <- "H:/USHiddenRivers/" # top level working directory
setwd(wd)
watersheds <- readOGR(paste(wd, "/shapefiles/watersheds/WBD_HU10_watersheds.shp", sep=""))
watersheds <- spTransform(watersheds, CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
huc10s <- as.character(watersheds$huc10)
target_watershed <- watersheds[which(as.logical(rowSums(sapply(HUCs, startsWith, x=huc10s)))),]
target_watershed <- aggregate(target_watershed, dissolve=T)
# crop watershed at coastline using low resolution state borders shapefile
# data from https://www2.census.gov/geo/tiger/GENZ2018/shp/cb_2018_us_state_5m.zip
state_borders_lowres <- readOGR(paste(wd, "/shapefiles/stateBorders_lowRes/cb_2018_us_division_5m.shp", sep=""))
#target_watershed <- crop(target_watershed, state_borders_lowres)
target_watershed <- as(target_watershed, "SpatialPolygonsDataFrame" )
state_borders <- readOGR(paste(wd, "/shapefiles/stateBorders/statesp010g.shp", sep=""))
state_borders <- spTransform(state_borders, CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
# below code fixes some bad polygons in this shapefile
# simplify the polgons a tad (tweak 0.00001 to your liking)
state_borders <- gSimplify(state_borders, tol = 0.00001)
# this is a well known R / GEOS hack (usually combined with the above) to
# deal with "bad" polygons
state_borders <- gBuffer(state_borders, byid=TRUE, width=0)
# any bad polys?
sum(gIsValid(state_borders, byid=TRUE)==FALSE)
# INLETS
inlet_outline <- crop(state_borders, target_watershed)
inlet <- gDifference(target_watershed, inlet_outline)
inlet <- as(inlet, "SpatialPolygonsDataFrame" )
inlet <- gSimplify(inlet, tol = 0.00001)
inlet <- gBuffer(inlet, byid=TRUE, width=0)
setwd(paste(wd, "/shapefiles/isolatedInlets", sep=""))
writeOGR(inlet, dsn = '.', layer = paste(river_name, "_inlet", sep=""), driver = "ESRI Shapefile", overwrite_layer=TRUE)
# INLETS
inlet_outline <- crop(state_borders, target_watershed)
plot(inlet_outline)
inlet <- gDifference(target_watershed, inlet_outline)
inlet <- as(inlet, "SpatialPolygonsDataFrame" )
inlet <- gSimplify(inlet, tol = 0.00001)
inlet <- gBuffer(inlet, byid=TRUE, width=0)
plot(inlet)
inlet <- as(inlet, "SpatialPolygonsDataFrame" )
setwd(paste(wd, "/shapefiles/isolatedInlets", sep=""))
writeOGR(inlet, dsn = '.', layer = paste(river_name, "_inlet", sep=""), driver = "ESRI Shapefile", overwrite_layer=TRUE)
##############################################################################################################################
# READ data for isolated rivers and watersheds
riverFiles <- list.files(path="./shapefiles/isolatedRivers/", pattern="*.shp")
wsFiles <- list.files(path="./shapefiles/isolatedWatersheds/", pattern="*.shp")
lakesFiles <- list.files(path="./shapefiles/isolatedWaterbodies/", pattern="*_lakes.shp")
inletFiles <- list.files(path="./shapefiles/isolatedInlets/", pattern="*_inlet.shp")
inletFiles
wd <- "H:/USHiddenRivers/" # top level working directory
setwd(wd)
##############################################################################################################################
# READ data for isolated rivers and watersheds
riverFiles <- list.files(path="./shapefiles/isolatedRivers/", pattern="*.shp")
wsFiles <- list.files(path="./shapefiles/isolatedWatersheds/", pattern="*.shp")
lakesFiles <- list.files(path="./shapefiles/isolatedWaterbodies/", pattern="*_lakes.shp")
inletFiles <- list.files(path="./shapefiles/isolatedInlets/", pattern="*_inlet.shp")
inletFiles
inletFiles <- inletFiles[-c(2,4,5,7,17,20,21,34)]
targetInlets <- list()
for(i in 1:length(inletFiles)){
targetInlets[[i]] <- readOGR(paste(wd, "/shapefiles/isolatedInlets/", inletFiles[[i]], sep=""))
targetInlets[[i]]@data$target <- c(str_replace(inletFiles[i], '.shp', ''))
plot(targetInlets[[i]], main=inletFiles[i])
}
targetInlets_merged <- do.call(bind, targetInlets)
# fix projections
targetInlets_merged <- spTransform(targetInlets_merged, CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"))
# below code fixes some bad polygons in this shapefile
# simplify the polgons a tad (tweak 0.00001 to your liking)
targetInlets_merged <- gSimplify(targetInlets_merged, tol = 0.00001)
targetInlets_merged_sf <- st_as_sf(targetInlets_merged)
targetInlets_merged_sf_crop <- st_crop(targetInlets_merged_sf, xmin = xmin, xmax = xmax,
ymin = ymin, ymax = ymax)
# set up data for ggplot
sf::sf_use_s2(FALSE)
targetInlets_merged_sf <- st_as_sf(targetInlets_merged)
targetInlets_merged_sf_crop <- st_crop(targetInlets_merged_sf, xmin = xmin, xmax = xmax,
ymin = ymin, ymax = ymax)
# main plot
p <- ggplot() +
geom_sf(data=canada_borders_sf_crop, fill="black", color=NA) +
geom_sf(data=state_borders_sf_crop, fill="black", color=NA) +
#geom_raster(topo_crop_df, mapping = aes(x = x, y = y, alpha = GRAY_HR_SR_OB)) +
#scale_alpha(range =  c(0, 1), guide = "none") +
#geom_sf(data=targetWS_merged_sf_crop, fill=alpha("white", 0.15), color=NA) +
scale_fill_manual(values=rep(c('#1b9e77','#d95f02','#7570b3','#e7298a','#66a61e','#e6ab02','#a6761d'), 10)) +
geom_sf(data=canada_rivers_can_sf_crop, color="#565656", lineend = "round", size=0.25, show.legend = FALSE,) + #CHECK STRAHLER
geom_sf(data=rivers_sf_crop, color="#565656", lineend = "round", aes(size=factor(Strahler)), show.legend = FALSE) +
geom_sf(data=canada_lakes_can_sf_crop, fill="#565656", color=NA) +
geom_sf(data=canada_islands_sf_crop, fill="black", color=NA) +
geom_sf(data=target_wbs_lakes_all_sf_crop, fill="#565656", color=NA) +
geom_sf(data=landBorders_sf_crop, fill=NA, color="white", size=0.8) +
geom_sf(data=targetWS_merged_sf_crop, aes(fill=factor(target_fac)), alpha=0.5, color=NA, show.legend = FALSE,) +
#geom_sf(data=targetInlets_merged_sf_crop, fill="#82eefd", color=NA) +
geom_sf(data=targetInlets_merged_sf_crop, fill="gray90", color=NA) +
geom_sf(data=targetLakes_merged_sf_crop, fill="gray90", color=NA) +
geom_sf(data=targetRivers_merged_sf_crop, aes(size=factor(Strahler)), color="gray90",
show.legend = FALSE, lineend = "round") +
geom_label_repel(data = drainages_1, aes(y=lat, x=long, label=River),
box.padding   = 0.35, size = 5, alpha=0.9, segment.alpha=1, point.padding = 0.5,
xlim=c(-78.5, -65),
ylim=c(20, 33.7),
segment.color = 'white', show.legend = FALSE,
arrow = arrow(length = unit(0.15, "cm"))) +
geom_label_repel(data = drainages_2, aes(y=lat, x=long, label=River),
box.padding   = 0.35, size = 5, alpha=0.9, segment.alpha=1, point.padding = 0.5,
xlim=c(-75, -65),
ylim=c(34, 38.2),
segment.color = 'white', show.legend = FALSE,
arrow = arrow(length = unit(0.15, "cm"))) +
geom_label_repel(data = drainages_3, aes(y=lat, x=long, label=River),
box.padding   = 0.35, size = 5, alpha=0.9, segment.alpha=1, point.padding = 0.5,
xlim=c(-74, -65),
ylim=c(38.2, 40.7),
force=15,
force_pull = 0,
max.time=5,
max.iter=1000000,
segment.color = 'white', show.legend = FALSE,
arrow = arrow(length = unit(0.15, "cm"))) +
geom_label_repel(data = drainages_4, aes(y=lat, x=long, label=River),
box.padding   = 0.35, size = 5, alpha=0.9, segment.alpha=1, point.padding = 0.5,
xlim=c(-70, -65),
ylim=c(40.6, 43.7),
segment.color = 'white', show.legend = FALSE,
force=10,
max.time=5,
max.iter=1000000,
arrow = arrow(length = unit(0.15, "cm"))) +
scale_size_manual(values=seq(0.1,20,by=0.04)) +
annotation_north_arrow(location = "br", which_north = "true", # adjust arrow location as needed
pad_x = unit(0.2, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering(text_size=20, text_col = "white", fill=c("darkgray", "white"), line_col="white"),
height = unit(2, "cm"), width = unit(2, "cm")) +
annotate("text", x=-70, y=34, label="Atlantic Ocean", color="gray60", hjust=0.5, vjust=0.5, size=20, angle=50) +
#labs(title = paste(river_name_plot, "River Basin")) +
#coord_equal() +
coord_sf(expand = FALSE, xlim=c(xmin, xmax), ylim=c(ymin, ymax)) +
ylab("") +
xlab("") +
theme(panel.grid.major = element_line(color = gray(.5), linetype = "dashed", size = 0.7),
panel.background = element_rect(fill = "#1c5163"),
plot.title = element_text(color = "black", size = 16, hjust = 0.5))
# plot dimensions
# mess with the multipliers to get a nice figure
height = (ymax-ymin)*0.7
width = (xmax-xmin)*0.6
# save as png
ggsave(paste(wd, "maps/", "eastCoastRivers", ".png", sep=""), plot=p,  units = "in", dpi=900, height=height, width=width)
#ggsave(paste(wd, "maps/", river_name, ".pdf", sep=""), height=height, width=width)
